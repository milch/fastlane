#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path('../../lib', __FILE__)

require 'fastlane'
require 'commander'
require 'fastlane/new_action'

HighLine.track_eof = false

class FastlaneApplication
  include Commander::Methods

  def run
    program :version, Fastlane::VERSION
    program :description, 'CLI for \'fastlane\' - Connect all iOS deployment tools into one streamlined workflow'
    program :help, 'Author', 'Felix Krause <fastlane@krausefx.com>'
    program :help, 'Website', 'http://fastlane.tools'
    program :help, 'GitHub', 'https://github.com/krausefx/fastlane'
    program :help_formatter, :compact

    always_trace!

    command :run do |c|
      c.syntax = 'fastlane run [lane]'
      c.description = 'Drive the fastlane for a specific environment.'

      c.action do |args, _options|
        if Fastlane::FastlaneFolder.path
          Fastlane::LaneManager.cruise_lanes(args)
        else
          create = agree('Could not find fastlane in current directory. Would you like to set it up? (y/n)'.yellow, true)
          Fastlane::Setup.new.run if create
        end
      end
    end

    command :lanes do |c|
      c.syntax = "fastlane lanes"
      c.description = "List all available lanes"

      c.action do |args, _options|
        if Fastlane::FastlaneFolder.path
          puts Fastlane::LaneManager.lanes
        else
          puts "No lanes available"
        end
      end
    end

    command :init do |c|
      c.syntax = 'fastlane init'
      c.description = 'Helps you setting up fastlane based on your existing tools.'

      c.action do |_args, _options|
        Fastlane::Setup.new.run
      end
    end

    command :new_action do |c|
      c.syntax = 'fastlane new_action'
      c.description = 'Create a new custom action for fastlane.'

      c.action do |_args, _options|
        Fastlane::NewAction.run
      end
    end

    default_command :run

    run!
  end
end

FastlaneApplication.new.run
